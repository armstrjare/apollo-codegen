{"version":3,"sources":["../src/downloadSchema.js"],"names":["defaultHeaders","url","outputPath","additionalHeaders","headers","result","method","body","response","json","message","errors","schemaData","data","writeFileSync","downloadSchema"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;AAMA;;;;AAEA,IAAMA,iBAAiB;AACrB,YAAU,kBADW;AAErB,kBAAgB;AAFK,CAAvB,C,CAdA;;;wEAmBe,iBAA8BC,GAA9B,EAAmCC,UAAnC,EAA+CC,iBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,mBADO,GACG,sBAAcJ,cAAd,EAA8BG,iBAA9B,CADH;AAGTE,kBAHS;AAAA;AAAA;AAAA,mBAKY,yBAAMJ,GAAN,EAAW;AAChCK,sBAAQ,MADwB;AAEhCF,uBAASA,OAFuB;AAGhCG,oBAAM,yBAAe,EAAE,sCAAF,EAAf;AAH0B,aAAX,CALZ;;AAAA;AAKLC,oBALK;AAAA;AAAA,mBAWIA,SAASC,IAAT,EAXJ;;AAAA;AAWXJ,kBAXW;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAaL,4EAAkE,YAAMK,OAAxE,CAbK;;AAAA;AAAA,iBAgBTL,OAAOM,MAhBE;AAAA;AAAA;AAAA;;AAAA,kBAiBL,iEAAuDN,OAAOM,MAA9D,CAjBK;;AAAA;AAoBPC,sBApBO,GAoBMP,MApBN;;AAAA,gBAqBRO,WAAWC,IArBH;AAAA;AAAA;AAAA;;AAAA,kBAsBL,4FAAkF,yBAAeR,MAAf,CAAlF,CAtBK;;AAAA;;AAyBb,yBAAGS,aAAH,CAAiBZ,UAAjB,EAA6B,yBAAeU,UAAf,EAA2B,IAA3B,EAAiC,CAAjC,CAA7B;;AAzBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeG,c;;;;SAAAA,c","file":"downloadSchema.js","sourcesContent":["// Based on https://facebook.github.io/relay/docs/guides-babel-plugin.html#using-other-graphql-implementations\n\nimport fetch from 'node-fetch';\nimport fs from 'fs';\nimport path from 'path';\n\nimport {\n  buildClientSchema,\n  introspectionQuery,\n  printSchema,\n} from 'graphql/utilities';\n\nimport { ToolError } from './errors'\n\nconst defaultHeaders = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json'\n};\n\nexport default async function downloadSchema(url, outputPath, additionalHeaders) {\n  const headers = Object.assign(defaultHeaders, additionalHeaders);\n\n  let result;\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({ 'query': introspectionQuery }),\n    });\n\n    result = await response.json();\n  } catch (error) {\n    throw new ToolError(`Error while fetching introspection query result: ${error.message}`);\n  }\n\n  if (result.errors) {\n    throw new ToolError(`Errors in introspection query result: ${result.errors}`);\n  }\n\n  const schemaData = result;\n  if (!schemaData.data) {\n    throw new ToolError(`No introspection query result data found, server responded with: ${JSON.stringify(result)}`);\n  }\n\n  fs.writeFileSync(outputPath, JSON.stringify(schemaData, null, 2));\n}\n"]}