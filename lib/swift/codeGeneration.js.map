{"version":3,"sources":["../../src/swift/codeGeneration.js"],"names":["generateSource","classDeclarationForOperation","initializerDeclarationForProperties","mappedProperty","structDeclarationForFragment","structDeclarationForSelectionSet","initializationForProperty","propertiesFromFields","propertyFromField","structNameForProperty","typeNameForFragmentName","possibleTypesForType","typeDeclarationForGraphQLType","context","generator","printOnNewline","printNewline","typesUsed","forEach","type","operations","operation","fragments","fragment","output","operationName","operationType","variables","fields","fragmentsReferenced","source","className","protocol","modifiers","adoptedProtocols","withIndent","length","print","properties","map","name","propertyName","typeName","isOptional","ofType","printNewlineIfNeeded","withinBlock","structName","propertyType","fragmentName","typeCondition","inlineFragments","fragmentSpreads","parentType","possibleTypes","beforeClosure","String","fragmentProperties","isProperSuperType","schema","bareTypeName","inlineFragmentProperties","inlineFragment","property","filter","isComposite","responseName","fieldName","isList","methodName","fieldArgs","args","field","isConditional","bareType","singularize","undefined","getPossibleTypes","enumerationDeclaration","structDeclarationForInputObjectType","description","values","getValues","value","getFields","permutations","concat","prefix"],"mappings":"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","file":"codeGeneration.js","sourcesContent":["import {\n  GraphQLError,\n  getNamedType,\n  isCompositeType,\n  isAbstractType,\n  isEqualType,\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLInputObjectType\n} from 'graphql'\n\nimport  { isTypeProperSuperTypeOf } from '../utilities/graphql'\n\nimport { camelCase, pascalCase } from 'change-case';\nimport Inflector from 'inflected';\n\nimport {\n  join,\n  wrap,\n} from '../utilities/printing';\n\nimport {\n  classDeclaration,\n  structDeclaration,\n  propertyDeclaration,\n  propertyDeclarations\n} from './language';\n\nimport { escapedString, multilineString } from './strings';\n\nimport {\n  typeNameFromGraphQLType,\n} from './types';\n\nimport CodeGenerator from '../utilities/CodeGenerator';\n\nexport function generateSource(context) {\n  const generator = new CodeGenerator(context);\n\n  generator.printOnNewline('//  This file was automatically generated and should not be edited.');\n  generator.printNewline();\n  generator.printOnNewline('import Apollo');\n\n  context.typesUsed.forEach(type => {\n    typeDeclarationForGraphQLType(generator, type);\n  });\n\n  Object.values(context.operations).forEach(operation => {\n    classDeclarationForOperation(generator, operation);\n  });\n\n  Object.values(context.fragments).forEach(fragment => {\n    structDeclarationForFragment(generator, fragment);\n  });\n\n  return generator.output;\n}\n\nexport function classDeclarationForOperation(\n  generator,\n  {\n    operationName,\n    operationType,\n    variables,\n    fields,\n    fragmentsReferenced,\n    source,\n  }\n) {\n\n  let className;\n  let protocol;\n\n  switch (operationType) {\n    case 'query':\n      className = `${pascalCase(operationName)}Query`;\n      protocol = 'GraphQLQuery';\n      break;\n    case 'mutation':\n      className = `${pascalCase(operationName)}Mutation`;\n      protocol = 'GraphQLMutation';\n      break;\n    default:\n      throw new GraphQLError(`Unsupported operation type \"${operationType}\"`);\n  }\n\n  classDeclaration(generator, {\n    className,\n    modifiers: ['public', 'final'],\n    adoptedProtocols: [protocol]\n  }, () => {\n    if (source) {\n      generator.printOnNewline('public static let operationDefinition =');\n      generator.withIndent(() => {\n        multilineString(generator, source);\n      });\n    }\n\n    if (fragmentsReferenced && fragmentsReferenced.length > 0) {\n      generator.printOnNewline('public static let queryDocument = operationDefinition');\n      fragmentsReferenced.forEach(fragment => {\n        generator.print(`.appending(${typeNameForFragmentName(fragment)}.fragmentDefinition)`)\n      });\n    }\n\n    if (variables && variables.length > 0) {\n      const properties = variables.map(({ name, type }) => {\n        const propertyName = camelCase(name);\n        const typeName = typeNameFromGraphQLType(generator.context, type);\n        const isOptional = !(type instanceof GraphQLNonNull || type.ofType instanceof GraphQLNonNull);\n        return { name, propertyName, type, typeName, isOptional };\n      });\n      generator.printNewlineIfNeeded();\n      propertyDeclarations(generator, properties);\n      generator.printNewlineIfNeeded();\n      initializerDeclarationForProperties(generator, properties);\n      generator.printNewlineIfNeeded();\n      generator.printOnNewline(`public var variables: GraphQLMap?`);\n      generator.withinBlock(() => {\n        generator.printOnNewline(wrap(\n          `return [`,\n          join(properties.map(({ name, propertyName }) => `\"${name}\": ${propertyName}`), ', '),\n          `]`\n        ));\n      });\n    } else {\n      initializerDeclarationForProperties(generator, []);\n    }\n\n    structDeclarationForSelectionSet(\n      generator,\n      {\n        structName: \"Data\",\n        fields\n      }\n    );\n  });\n}\n\nexport function initializerDeclarationForProperties(generator, properties) {\n  generator.printOnNewline(`public init`);\n  generator.print('(');\n  generator.print(join(properties.map(({ propertyName, type, typeName, isOptional }) =>\n    join([\n      `${propertyName}: ${typeName}`,\n      isOptional && ' = nil'\n    ])\n  ), ', '));\n  generator.print(')');\n\n  generator.withinBlock(() => {\n    properties.forEach(({ propertyName }) => {\n      generator.printOnNewline(`self.${propertyName} = ${propertyName}`);\n    });\n  });\n}\n\nexport function mappedProperty(generator, { propertyName, propertyType }, properties) {\n  generator.printOnNewline(`public var ${propertyName}: ${propertyType}`);\n  generator.withinBlock(() => {\n    generator.printOnNewline(wrap(\n      `return [`,\n      join(properties.map(({ propertyName }) => `\"${propertyName}\": ${propertyName}`), ', '),\n      `]`\n    ));\n  });\n}\n\nexport function structDeclarationForFragment(\n  generator,\n  {\n    fragmentName,\n    typeCondition,\n    fields,\n    inlineFragments,\n    fragmentSpreads,\n    source\n  }\n) {\n  const structName = pascalCase(fragmentName);\n\n  structDeclarationForSelectionSet(generator, {\n    structName,\n    adoptedProtocols: ['GraphQLNamedFragment'],\n    parentType: typeCondition,\n    possibleTypes: possibleTypesForType(generator.context, typeCondition),\n    fields,\n    fragmentSpreads,\n    inlineFragments\n  }, () => {\n    if (source) {\n      generator.printOnNewline('public static let fragmentDefinition =');\n      generator.withIndent(() => {\n        multilineString(generator, source);\n      });\n    }\n  });\n}\n\nexport function structDeclarationForSelectionSet(\n  generator,\n  {\n    structName,\n    adoptedProtocols = ['GraphQLMappable'],\n    parentType,\n    possibleTypes,\n    fields,\n    fragmentSpreads,\n    inlineFragments\n  },\n  beforeClosure\n) {\n  structDeclaration(generator, { structName, adoptedProtocols }, () => {\n    if (beforeClosure) {\n      beforeClosure();\n    }\n\n    if (possibleTypes) {\n      generator.printNewlineIfNeeded();\n      generator.printOnNewline('public static let possibleTypes = [');\n      generator.print(join(possibleTypes.map(type => `\"${String(type)}\"`), ', '));\n      generator.print(']');\n    }\n\n    const properties = fields && propertiesFromFields(generator.context, fields);\n\n    const fragmentProperties = fragmentSpreads && fragmentSpreads.map(fragmentName => {\n      const fragment = generator.context.fragments[fragmentName];\n      if (!fragment) {\n        throw new GraphQLError(`Cannot find fragment \"${fragmentName}\"`);\n      }\n      const propertyName = camelCase(fragmentName);\n      const typeName = typeNameForFragmentName(fragmentName);\n      const isProperSuperType = isTypeProperSuperTypeOf(generator.context.schema, fragment.typeCondition, parentType);\n      return { propertyName, typeName, bareTypeName: typeName, isProperSuperType };\n    });\n\n    const inlineFragmentProperties = inlineFragments && inlineFragments.map(inlineFragment => {\n      const bareTypeName = 'As' + pascalCase(String(inlineFragment.typeCondition));\n      const propertyName = camelCase(bareTypeName);\n      const typeName = bareTypeName + '?'\n      return { ...inlineFragment, propertyName, typeName, bareTypeName };\n    });\n\n    generator.printNewlineIfNeeded();\n\n    if (parentType) {\n      generator.printOnNewline('public let __typename');\n\n      if (isAbstractType(parentType)) {\n        generator.print(`: String`);\n      } else {\n        generator.print(` = \"${String(parentType)}\"`);\n      }\n    }\n\n    propertyDeclarations(generator, properties);\n\n    if (fragmentProperties && fragmentProperties.length > 0) {\n      generator.printNewlineIfNeeded();\n      propertyDeclaration(generator, { propertyName: 'fragments', typeName: 'Fragments' })\n    }\n\n    if (inlineFragmentProperties && inlineFragmentProperties.length > 0) {\n      generator.printNewlineIfNeeded();\n      propertyDeclarations(generator, inlineFragmentProperties);\n    }\n\n    generator.printNewlineIfNeeded();\n    generator.printOnNewline('public init(reader: GraphQLResultReader) throws');\n    generator.withinBlock(() => {\n      if (parentType && isAbstractType(parentType)) {\n        generator.printOnNewline(`__typename = try reader.value(for: Field(responseName: \"__typename\"))`);\n      }\n\n      if (properties) {\n        properties.forEach(property => initializationForProperty(generator, property));\n      }\n\n      if (fragmentProperties && fragmentProperties.length > 0) {\n        generator.printNewlineIfNeeded();\n        fragmentProperties.forEach(({ propertyName, typeName, bareTypeName, isProperSuperType }) => {\n          generator.printOnNewline(`let ${propertyName} = try ${typeName}(reader: reader`);\n          if (isProperSuperType) {\n            generator.print(')');\n          } else {\n            generator.print(`, ifTypeMatches: __typename)`);\n          }\n        });\n        generator.printOnNewline(`fragments = Fragments(`);\n        generator.print(join(fragmentSpreads.map(fragmentName => {\n          const propertyName = camelCase(fragmentName);\n          return `${propertyName}: ${propertyName}`;\n        }), ', '));\n        generator.print(')');\n      }\n\n      if (inlineFragmentProperties && inlineFragmentProperties.length > 0) {\n        generator.printNewlineIfNeeded();\n        inlineFragmentProperties.forEach(({ propertyName, typeName, bareTypeName }) => {\n          generator.printOnNewline(`${propertyName} = try ${bareTypeName}(reader: reader, ifTypeMatches: __typename)`);\n        });\n      }\n    });\n\n    if (fragmentProperties && fragmentProperties.length > 0) {\n      structDeclaration(\n        generator,\n        {\n          structName: 'Fragments'\n        },\n        () => {\n          fragmentProperties.forEach(({ propertyName, typeName, isProperSuperType }) => {\n            if (!isProperSuperType) {\n              typeName += '?';\n            }\n            propertyDeclaration(generator, { propertyName, typeName });\n          })\n        }\n      );\n    }\n\n    if (inlineFragmentProperties && inlineFragmentProperties.length > 0) {\n      inlineFragmentProperties.forEach(property => {\n        structDeclarationForSelectionSet(\n          generator,\n          {\n            structName: property.bareTypeName,\n            parentType: property.typeCondition,\n            possibleTypes: possibleTypesForType(generator.context, property.typeCondition),\n            adoptedProtocols: ['GraphQLConditionalFragment'],\n            fields: property.fields,\n            fragmentSpreads: property.fragmentSpreads\n          }\n        );\n      });\n    }\n\n    if (properties) {\n      properties.filter(property => property.isComposite).forEach(property => {\n        structDeclarationForSelectionSet(\n          generator,\n          {\n            structName: structNameForProperty(property),\n            parentType: getNamedType(property.type),\n            fields: property.fields,\n            fragmentSpreads: property.fragmentSpreads,\n            inlineFragments: property.inlineFragments\n          }\n        );\n      });\n    }\n  });\n}\n\nexport function initializationForProperty(generator, { propertyName, responseName, fieldName, type, isOptional }) {\n  const isList = type instanceof GraphQLList || type.ofType instanceof GraphQLList;\n\n  const methodName = isOptional ? (isList ? 'optionalList' : 'optionalValue') : (isList ? 'list' : 'value');\n\n  const fieldArgs = join([`responseName: \"${responseName}\"`, responseName != fieldName ? `fieldName: \"${fieldName}\"` : null], ', ');\n  const args = [`for: Field(${fieldArgs})`];\n\n  generator.printOnNewline(`${propertyName} = try reader.${methodName}(${ join(args, ', ') })`);\n}\n\nexport function propertiesFromFields(context, fields) {\n  return fields.map(field => propertyFromField(context, field));\n}\n\nexport function propertyFromField(context, field) {\n  const name = field.name || field.responseName;\n  const propertyName = camelCase(name);\n\n  const type = field.type;\n  const isOptional = field.isConditional || !(type instanceof GraphQLNonNull || type.ofType instanceof GraphQLNonNull);\n  const bareType = getNamedType(type);\n\n  if (isCompositeType(bareType)) {\n    const bareTypeName = pascalCase(Inflector.singularize(propertyName));\n    const typeName = typeNameFromGraphQLType(context, type, bareTypeName, isOptional);\n    return { ...field, propertyName, typeName, bareTypeName, isOptional, isComposite: true };\n  } else {\n    const typeName = typeNameFromGraphQLType(context, type, undefined, isOptional);\n    return { ...field, propertyName, typeName, isOptional, isComposite: false };\n  }\n}\n\nexport function structNameForProperty(property) {\n  return pascalCase(Inflector.singularize(property.responseName));\n}\n\nexport function typeNameForFragmentName(fragmentName) {\n  return pascalCase(fragmentName);\n}\n\nexport function possibleTypesForType(context, type) {\n  if (isAbstractType(type)) {\n    return context.schema.getPossibleTypes(type);\n  } else {\n    return [type];\n  }\n}\n\nexport function typeDeclarationForGraphQLType(generator, type) {\n  if (type instanceof GraphQLEnumType) {\n    enumerationDeclaration(generator, type);\n  } else if (type instanceof GraphQLInputObjectType) {\n    structDeclarationForInputObjectType(generator, type);\n  }\n}\n\nfunction enumerationDeclaration(generator, type) {\n  const { name, description } = type;\n  const values = type.getValues();\n\n  generator.printNewlineIfNeeded();\n  generator.printOnNewline(description && `/// ${description}`);\n  generator.printOnNewline(`public enum ${name}: String`);\n  generator.withinBlock(() => {\n    values.forEach(value =>\n      generator.printOnNewline(`case ${camelCase(value.name)} = \"${value.value}\"${wrap(' /// ', value.description)}`)\n    );\n  });\n  generator.printNewline();\n  generator.printOnNewline(`extension ${name}: JSONDecodable, JSONEncodable {}`);\n}\n\nfunction structDeclarationForInputObjectType(generator, type) {\n  const { name: structName, description } = type;\n  const adoptedProtocols = ['GraphQLMapConvertible'];\n  const properties = propertiesFromFields(generator.context, Object.values(type.getFields()));\n\n  structDeclaration(generator, { structName, description, adoptedProtocols }, () => {\n    generator.printOnNewline(`public var graphQLMap: GraphQLMap`);\n\n    // Compute permutations with and without optional properties\n    let permutations = [[]];\n    for (const property of properties) {\n      permutations = [].concat(...permutations.map(prefix => {\n        if (property.isOptional) {\n          return [prefix, [...prefix, property]];\n        } else {\n          return [[...prefix, property]];\n        }\n      }));\n    }\n\n    permutations.forEach(properties => {\n      generator.printNewlineIfNeeded();\n      generator.printOnNewline(`public init`);\n      generator.print('(');\n      generator.print(join(properties.map(({ propertyName, typeName }) =>\n        `${propertyName}: ${typeName}`\n      ), ', '));\n      generator.print(')');\n\n      generator.withinBlock(() => {\n        generator.printOnNewline(wrap(\n          `graphQLMap = [`,\n          join(properties.map(({ propertyName }) => `\"${propertyName}\": ${propertyName}`), ', ') || ':',\n          `]`\n        ));\n      });\n    });\n  });\n}\n"]}