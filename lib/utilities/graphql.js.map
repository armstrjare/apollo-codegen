{"version":3,"sources":["../../src/utilities/graphql.js"],"names":["isTypeProperSuperTypeOf","getOperationRootType","getFieldDef","schema","maybeSuperType","subType","isPossibleType","operation","getQueryType","mutationType","getMutationType","GraphQLError","subscriptionType","getSubscriptionType","parentType","fieldAST","name","value","getFields"],"mappings":";;;;;QAagBA,uB,GAAAA,uB;QASAC,oB,GAAAA,oB;QAmCAC,W,GAAAA,W;;AAzDhB;;AAaO,SAASF,uBAAT,CAAiCG,MAAjC,EAAyCC,cAAzC,EAAyDC,OAAzD,EAAkE;AACvE,SAAO,0BAAYD,cAAZ,EAA4BC,OAA5B,KAAyC,6BAAeD,cAAf,KAAkCD,OAAOG,cAAP,CAAsBF,cAAtB,EAAsCC,OAAtC,CAAlF;AACD;;AAED;;AAEA;;;AAGO,SAASJ,oBAAT,CAA8BE,MAA9B,EAAsCI,SAAtC,EAAiD;AACtD,UAAQA,UAAUA,SAAlB;AACE,SAAK,OAAL;AACE,aAAOJ,OAAOK,YAAP,EAAP;AACF,SAAK,UAAL;AACE,UAAMC,eAAeN,OAAOO,eAAP,EAArB;AACA,UAAI,CAACD,YAAL,EAAmB;AACjB,cAAM,IAAIE,YAAJ,CACJ,wCADI,EAEJ,CAACJ,SAAD,CAFI,CAAN;AAID;AACD,aAAOE,YAAP;AACF,SAAK,cAAL;AACE,UAAMG,mBAAmBT,OAAOU,mBAAP,EAAzB;AACA,UAAI,CAACD,gBAAL,EAAuB;AACrB,cAAM,IAAID,YAAJ,CACJ,4CADI,EAEJ,CAACJ,SAAD,CAFI,CAAN;AAID;AACD,aAAOK,gBAAP;AACF;AACE,YAAM,IAAID,YAAJ,CACJ,uDADI,EAEJ,CAACJ,SAAD,CAFI,CAAN;AAtBJ;AA2BD;;AAED;;;;;AAKO,SAASL,WAAT,CAAqBC,MAArB,EAA6BW,UAA7B,EAAyCC,QAAzC,EAAmD;AACxD,MAAMC,OAAOD,SAASC,IAAT,CAAcC,KAA3B;AACA,MAAID,SAAS,4BAAmBA,IAA5B,IACAb,OAAOK,YAAP,OAA0BM,UAD9B,EAC0C;AACxC;AACD;AACD,MAAIE,SAAS,0BAAiBA,IAA1B,IACAb,OAAOK,YAAP,OAA0BM,UAD9B,EAC0C;AACxC;AACD;AACD,MAAIE,SAAS,8BAAqBA,IAA9B,KACCF,oDACAA,mDADA,IAEAA,+CAHD,CAAJ,EAIE;AACA;AACD;AACD,MAAIA,oDACAA,mDADJ,EACgD;AAC9C,WAAOA,WAAWI,SAAX,GAAuBF,IAAvB,CAAP;AACD;AACF","file":"graphql.js","sourcesContent":["import {\n  isEqualType,\n  isTypeSubTypeOf,\n  isAbstractType,\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType\n} from 'graphql';\n\nexport function isTypeProperSuperTypeOf(schema, maybeSuperType, subType) {\n  return isEqualType(maybeSuperType, subType) || (isAbstractType(maybeSuperType) && schema.isPossibleType(maybeSuperType, subType));\n}\n\n// Utility functions extracted from graphql-js\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nexport function getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      return schema.getQueryType();\n    case 'mutation':\n      const mutationType = schema.getMutationType();\n      if (!mutationType) {\n        throw new GraphQLError(\n          'Schema is not configured for mutations',\n          [operation]\n        );\n      }\n      return mutationType;\n    case 'subscription':\n      const subscriptionType = schema.getSubscriptionType();\n      if (!subscriptionType) {\n        throw new GraphQLError(\n          'Schema is not configured for subscriptions',\n          [operation]\n        );\n      }\n      return subscriptionType;\n    default:\n      throw new GraphQLError(\n        'Can only compile queries, mutations and subscriptions',\n        [operation]\n      );\n  }\n}\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nexport function getFieldDef(schema, parentType, fieldAST) {\n  const name = fieldAST.name.value;\n  if (name === SchemaMetaFieldDef.name &&\n      schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  }\n  if (name === TypeMetaFieldDef.name &&\n      schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n  if (name === TypeNameMetaFieldDef.name &&\n      (parentType instanceof GraphQLObjectType ||\n       parentType instanceof GraphQLInterfaceType ||\n       parentType instanceof GraphQLUnionType)\n  ) {\n    return TypeNameMetaFieldDef;\n  }\n  if (parentType instanceof GraphQLObjectType ||\n      parentType instanceof GraphQLInterfaceType) {\n    return parentType.getFields()[name];\n  }\n}\n"]}